#K8s manifest file
# 1. ServiceAccount - For identifying pods
apiVersion: v1
kind: ServiceAccount
metadata:
  name: wiz-app-serviceaccount
  namespace: default

---
# 2. ClusterRoleBinding - Grants cluster-admin permissions to the ServiceAccount

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: wiz-app-admin-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: wiz-app-serviceaccount
    namespace: default

---
# ----------------------------------------------------------------------------------
# 3. Deployment
# - Runs 2 replicas of the app
# - Uses the above ServiceAccount
# - Pulls image from ECR
# - Loads environment variables from .env
# ----------------------------------------------------------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: simple-docker-app
  labels:
    app: simple-docker-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: simple-docker-app
  template:
    metadata:
      labels:
        app: simple-docker-app
    spec:
      serviceAccountName: wiz-app-serviceaccount
      containers:
        - name: simple-docker-app
          image: 108782097787.dkr.ecr.us-east-2.amazonaws.com/simple-docker-service-0a37c0e6438d:latest
          ports:
            - containerPort: 3000
          env:
            - name: PORT
              value: "3000"
            - name: SECRET_KEY
              value: "3380d0d9db455d0efc71bf6ff3c06583ec2c0f10baf99a088f4570f48536adc0"
            - name: MONGODB_URI
              value: "mongodb://adminUser:WizardingWorld@3.138.178.233:27017/admin"
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "250m"
              memory: "256Mi"

---
# ----------------------------------------------------------------------------------
# 4. Service
# - Exposes the app on NodePort for use with Ingress
# ----------------------------------------------------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: simple-docker-service
  labels:
    app: simple-docker-app
spec:
  selector:
    app: simple-docker-app
  ports:
    - port: 80
      targetPort: 3000
  type: NodePort

---
# ----------------------------------------------------------------------------------
# 5. Ingress (ALB) - Exposes app via Application Load Balancer
# ----------------------------------------------------------------------------------
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: simple-docker-ingress
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
    alb.ingress.kubernetes.io/backend-protocol: HTTP
spec:
  ingressClassName: alb
  rules:
    - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: simple-docker-service
                port:
                  number: 80
