# ----------------------------------------------------------------------------------
# 1. ServiceAccount for IRSA:
# - Allows pods to assume an IAM role to pull from Amazon ECR
# - Make sure the role ARN matches the one with ECR pull permissions
# ----------------------------------------------------------------------------------
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ecr-access-sa
  namespace: default
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::108782097787:role/EKS_ECR_Access_IRSA_Role

---
# ----------------------------------------------------------------------------------
# 2. Deployment:
# - Runs 2 replicas of your Go application
# - Uses the IRSA-enabled service account
# - Pulls the image from ECR
# - Exposes container port 3000
# ----------------------------------------------------------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: simple-docker-app
  labels:
    app: simple-docker-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: simple-docker-app
  template:
    metadata:
      labels:
        app: simple-docker-app
    spec:
      serviceAccountName: ecr-access-sa
      containers:
        - name: simple-docker-app
          image: 108782097787.dkr.ecr.us-east-2.amazonaws.com/simple-docker-service-0a37c0e6438d:latest
          ports:
            - containerPort: 3000
          env:
            - name: PORT
              value: "3000"
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "250m"
              memory: "256Mi"

---
# ----------------------------------------------------------------------------------
# 3. Service:
# - Exposes the pods on port 80 inside the cluster
# - Uses NodePort for access via Ingress/Load Balancer
# ----------------------------------------------------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: simple-docker-service
  labels:
    app: simple-docker-app
spec:
  selector:
    app: simple-docker-app
  ports:
    - port: 80
      targetPort: 3000
  type: NodePort

---
# ----------------------------------------------------------------------------------
# 4. Ingress:
# - Uses AWS ALB to expose the app publicly
# - Requires AWS ALB Ingress Controller to be installed
# ----------------------------------------------------------------------------------
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: simple-docker-ingress
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
    alb.ingress.kubernetes.io/backend-protocol: HTTP
spec:
  ingressClassName: alb
  rules:
    - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: simple-docker-service
                port:
                  number: 80
